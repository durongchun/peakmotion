@model ShippingVM
@using peakmotion.ViewModels;

<link rel="stylesheet" href="~/css/payment.css">
<script
    src="https://www.paypal.com/sdk/js?client-id=AT2sUbDtIZArj6muaJWRM-rrwQrPgJomzrI-99S2vpOhY0NlF2m_VP_pbmGqC6c8RJxCZiiGkWg3MV_R&currency=CAD"></script>


@{
    ViewData["Title"] = "Products";
    Layout = "~/Views/Shared/_Layout.cshtml";

    
    var products = (List<string>)ViewData["ProductData"]; 
    decimal subtotal = 0;
    decimal gstRate = 0.05m;  // 5% GST
    decimal pstRate = 0.07m;  // 7% PST
    decimal totalAmount = 0;
    int qty = 1;

    // Loop through products and calculate the subtotal
    foreach (var product in products)
    {
       
        var quantityText = product.Contains("Qty: ") ? product.Split("Qty: ")[1].Trim() : "1"; // Default to "1" if "Qty: " not found
        if (int.TryParse(quantityText, out int quantity))
        {
            qty = quantity; // Multiply subtotal by the parsed quantity
            
        }
        else
        {
            // Handle invalid quantity (log or use a default value)
            System.Diagnostics.Debug.WriteLine($"Invalid quantity in: {qty}");
        }

        // Extract the price part assuming it is in the format "Price: $75.00"
        var priceText = product.Contains("Price: ") ? product.Split("Price: ")[1] : product;
        
        // If price is formatted as "$75.00", remove "$" and parse it to decimal
        if (priceText.StartsWith("$"))
        {
            priceText = priceText.Substring(1);  // Remove the "$"
            if (decimal.TryParse(priceText, out decimal price))
            {
                subtotal += price;
            }
            else
            {
                // Handle the case when the price format is invalid
                // Log or throw an exception
            }
        }
    }

   System.Diagnostics.Debug.WriteLine($"qty =: {qty}"); 

    // Calculate GST and PST
    subtotal = qty * subtotal;
    System.Diagnostics.Debug.WriteLine($"subtotal =: {subtotal}"); 
    decimal gstAmount = subtotal * gstRate;
    decimal pstAmount = subtotal * pstRate;
    decimal totalTax = gstAmount + pstAmount;
    decimal totalPrice = subtotal + totalTax;

    ViewData["TotalPrice"] = totalPrice;
}


<partial name="_Shop" for="@Model" />

@if (User.Identity.IsAuthenticated)
{
    string currency = "CAD";
    <div class="row">
    <div class="offset-9 col-sm-3 col-md-2">
        <div id="paypal-button-container" style="text-align:right;padding-right:20px;"></div>
    </div>
</div>
    <div class="row">
    <div class="offset-9 col-sm-2">
        <table class="table">
            <tbody>
                <tr>
                    <td>
                        <span style="color:darkred;">Amount:</span> 
                        $<span id="totalAmount">@totalPrice.ToString("F2")</span> 
                        <span id="currency">@currency</span>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>

</div>
    <script>
    paypal.Buttons({
        // Set up the transaction
        createOrder: function (data, actions) {
            const amount = document.getElementById('totalAmount').textContent.trim();
            const currency = document.getElementById('currency').textContent.trim();
            console.log("Amount:", amount, "Currency:", currency);
            return actions.order.create({
                purchase_units: [{
                    amount: {
                        value: document.getElementById('totalAmount').textContent.trim(),
                        currency_code: document.getElementById('currency').textContent.trim()

                    }
                }]
            });
        },

        // Finalize the transaction
        onApprove: function (data, actions) {
            return actions.order.capture().then(function (details) {
                console.log("Transaction details:", details);
                const transactionId = encodeURIComponent(details.id);
                const amount = encodeURIComponent(details.purchase_units[0].amount.value);
                const payerName = encodeURIComponent(details.payer.name.given_name);
                const email = encodeURIComponent(details.payer.email_address); // Extract email

                window.location.href =
                    `/Home/PayPalConfirmation?TransactionId=${transactionId}&Amount=${amount}&PayerName=${payerName}&Email=${email}`;
            });
        },


        onCancel: function (data) {
            alert('Transaction was cancelled.');
        },
        onError: function (err) {
            alert('An error occurred during the transaction.');
        },
        style: {
            layout: 'vertical', // 'vertical', 'horizontal'
            color: 'blue',      // 'gold', 'blue', 'silver', 'black'
            shape: 'rect',      // 'rect', 'pill'
            label: 'paypal'     // 'checkout', 'pay', 'buynow', 'paypal'
        }
    }).render('#paypal-button-container'); // Ensure this matches the ID
</script>
}

else
{
    <div class="row" style="">
    <div class="offset-2 col-sm-6">
        <div class="form-group">
            <button class="btn btn-primary" style="border-color:#6E0B14; background-color: #6E0B14;"
                onclick="location.href='@Url.Content("~/Identity/Account/Login")'">
                Login to Purchase
            </button>
        </div>
    </div>
</div>
}
