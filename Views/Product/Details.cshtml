@model peakmotion.ViewModels.ProductDetailVM

@{
    var cartDict = ViewBag.CartQuantities as Dictionary<int, int> ?? new Dictionary<int, int>();
    int qty = cartDict.ContainsKey(Model.Pkproductid) ? cartDict[Model.Pkproductid] : 0;

    
}

<head>
    <link rel="stylesheet" href="~/css/product-details.css" />
</head>

<div class="product-container mx-7 my-5">
    <!-- Product Image Carousel -->
    <div class="row">
        <div class="col-md-6 pe-5 ps-4">
            <div class="product-image-carousel">
                <div class="carousel slide" id="carouselExampleIndicators">
                    <div class="carousel-indicators">
                        @for (int i = 0; i < (ViewBag.ProductVM.Images?.Count ?? 0); i++)
                        {
                            <button type="button" data-bs-target="#carouselExampleIndicators" data-bs-slide-to="@i" class="@(i == 0 ? "active" : "")" aria-current="@(i == 0 ? "true" : "false")" aria-label="Slide @(i + 1)"></button>
                        }
                    </div>

                    <div class="carousel-inner">
                        @if (ViewBag.ProductVM != null && ViewBag.ProductVM.PrimaryImage != null)
                        {
                            <div class="carousel-item active">
                                <img src="@Url.Content(ViewBag.ProductVM.PrimaryImage.Url)" class="d-block w-100" alt="@ViewBag.ProductVM.ProductName" />
                            </div>
                            @foreach (var image in ViewBag.ProductVM.Images)
                            {
                                if (image.Url != ViewBag.ProductVM.PrimaryImage.Url)
                                {
                                    <div class="carousel-item">
                                        <img src="@Url.Content(image.Url)" class="d-block w-100" alt="@ViewBag.ProductVM.ProductName" />
                                    </div>
                                }
                            }
                        }
                        else
                        {
                            <div class="carousel-item active">
                                <img src="@Url.Content("/images/no-image.png")" class="d-block w-100" alt="No Image" />
                            </div>
                        }
                    </div>

                    @{
                        // Log the PrimaryImage URL
                        Console.WriteLine("PrimaryImage URL: " + (ViewBag.ProductVM?.PrimaryImage?.Url ?? "none"));

                        // If the Images collection exists, log each image's URL
                        if (ViewBag.ProductVM != null && ViewBag.ProductVM.Images != null)
                        {
                            foreach (var image in ViewBag.ProductVM.Images)
                            {
                                Console.WriteLine("Image URL: " + image.Url);
                            }
                        }
                        else
                        {
                            Console.WriteLine("Images collection does not exist.");
                        }
                    }


                    <button class="carousel-control-prev" type="button" data-bs-target="#carouselExampleIndicators"
                        data-bs-slide="prev">
                        <span class="carousel-control-prev-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Previous</span>
                    </button>
                    <button class="carousel-control-next" type="button" data-bs-target="#carouselExampleIndicators"
                        data-bs-slide="next">
                        <span class="carousel-control-next-icon" aria-hidden="true"></span>
                        <span class="visually-hidden">Next</span>
                    </button>
                </div>
            </div>
        </div>
        <div class="col-md-6 d-flex flex-column justify-content-center"> <!-- Product Details -->
            <div class="product-details w-100">
                <h1 class="product-name pb-5">@Model.Productname</h1>
                
                @{
                    bool hasDiscount = ViewBag.ProductVM.Discount != null && ViewBag.ProductVM.Discount.Description == "discount";
                    decimal finalPrice = ViewBag.ProductVM.Price;
                    if (hasDiscount)
                    {
                        finalPrice = ViewBag.ProductVM.Price - ViewBag.ProductVM.Discount.Amount;
                        if (finalPrice < 0)
                        {
                            finalPrice = 0;
                        }
                    }
                }
                @if (hasDiscount)
                {
                    <p class="product-price">
                        <span class="product-discounted">@ViewBag.ProductVM.Price.ToString("C")</span>
                        @finalPrice.ToString("C")
                    </p>
                }
                else
                {
                    <p class="product-price">@ViewBag.ProductVM.Price.ToString("C")</p>
                }

              

                <form method="post" asp-controller="Cart" asp-action="Add" class="d-flex flex-column gap-3">
                    <input type="hidden" name="ProductId" value="@Model.Pkproductid" />
                    <input type="hidden" name="ProductName" value="@Model.Productname" />
                    <input type="hidden" name="ProductPrice" value="$@Model.Unitprice.ToString("F2")" />
                    <input type="hidden" id="selectedColor" name="selectedColor" value="@Model.IsSelectedColor" />
                    <input type="hidden" id="selectedSizeHidden" name="selectedSize" value="@Model.IsSelectedSize" /> <!-- FIXED -->

                      <!-- Color Selection -->
                    @if (Model.Colors?.Any() == true)
                    {
                        <div class="color-selection pb-5">
                            <p>Select Color: <span id="selectedColorText">@Model.IsSelectedColor</span></p>
                            <div class="colors">
                                @foreach (var color in Model.Colors)
                                {
                                    <button type="button" class="color-circle @(color == Model.IsSelectedColor ? "selected" : "")"
                                            style="background-color: @color;"
                                            data-color="@color"
                                            onclick="selectColor(this, '@color')"></button>
                                }
                            </div>


                        </div>
                    }

                    @if (Model.Sizes?.Any() == true){
                        <div>
                         <!-- Size Dropdown -->
                        <label for="sizeDropdown">Select Size:</label>
                        <select id="sizeDropdown" name="selectedSize" onchange="updateSizeValue()">
                            @foreach (var size in Model.Sizes)
                            {
                                
                            if (size == Model.IsSelectedSize)
                                            {
                                                <option value="@size" selected>@size</option>
                                            }
                                            else
                                            {
                                                <option value="@size">@size</option>
                                            }     
                            }
                        </select>
                    </div>
                   
                    }
                    

                    <div class="pb-5">
                         <!-- new qty selection -->
                        <label for="qty">Quantity:</label>
                        <select id="qty" name="qty">
                            @for (int i = 1; i <= (Model.Qty < 10 ? Model.Qty : 10); i++)
                            {
                                if (i == qty)
                                {
                                    <option value="@i" selected>@i</option>
                                }
                                else
                                {
                                    <option value="@i">@i</option>
                                }
                            }
                        </select>

                    </div>

                    <!-- Add to Cart Button -->
                    <button type="submit" class="add-to-cart bg-dark">Add to Cart</button>
                </form>

            </div>
            <!-- Product Description -->
            <div class="d-flex w-100">
                <div class="product-description d-flex flex-column mw-50 pt-5">
                    @if (Model.Description != null)
                    {
                        <p>@Model.Description</p>
                    }
                    else
                    {
                        <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse ultricies nisl non enim
                            gravida,
                            ac
                            aliquet nulla placerat. Lorem ipsum dolor sit amet, consectetur adipiscing elit. Suspendisse
                            ultricies nisl non enim
                            gravida,
                            ac
                            aliquet nulla placerat.</p>
                    }
                </div>
            </div>
        </div>

    </div>

</div>

<style scoped>
    .product-price {
        display: flex;
        flex: 1;
        justify-content: start;
        align-items: center;
        margin-top: 0.5rem;
        margin-bottom: 1rem;
        text-align: right;
        font-size: 2rem;
        opacity: 0.8;
        color: black;
    }

    .product-discounted {
        text-decoration: line-through;
        opacity: 0.5;
        margin-right: 0.25rem;
    }

</style>

<script>
        function selectColor(element, color) {
            console.log("Color selected:", color);

            // Remove 'selected' class from all buttons
            document.querySelectorAll(".color-circle").forEach(btn => btn.classList.remove("selected"));

            // Add 'selected' class to clicked button
            element.classList.add("selected");

            // Update the hidden input value
            document.getElementById("selectedColor").value = color;

            // Update the text display
            document.getElementById("selectedColorText").textContent = color;
        }

        function updateSizeValue() {
            debugger;
            var selectedSize = document.getElementById("sizeDropdown").value;
            
            // Update the correct hidden input (inside the form)
            document.getElementById("selectedSizeHidden").value = selectedSize;

            console.log("Updated selectedSize:", selectedSize);
        }






    // Ensure the default color is visually marked on page load
    document.addEventListener("DOMContentLoaded", function () {
        var selectedColor = document.getElementById("selectedColor").value;
        document.getElementById("selectedColorText").textContent = selectedColor;

        // Apply 'selected' class to the correct button
        document.querySelectorAll(".color-circle").forEach(btn => {
            if (btn.getAttribute("data-color") === selectedColor) {
                btn.classList.add("selected");
            }
        });
    });


</script>
