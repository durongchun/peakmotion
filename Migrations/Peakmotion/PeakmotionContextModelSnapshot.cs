// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using peakmotion.Models;

#nullable disable

namespace peakmotion.Migrations.Peakmotion
{
    [DbContext(typeof(PeakmotionContext))]
    partial class PeakmotionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("peakmotion.Models.Cart", b =>
                {
                    b.Property<int>("Pkcartid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkcartid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkcartid"));

                    b.Property<int>("Fkemailid")
                        .HasColumnType("integer")
                        .HasColumnName("fkemailid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty");

                    b.HasKey("Pkcartid")
                        .HasName("Cart_pkey");

                    b.HasIndex("Fkemailid");

                    b.ToTable("Cart", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.CartProduct", b =>
                {
                    b.Property<int>("Pkcartproductcid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkcartproductcid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkcartproductcid"));

                    b.Property<int>("Fkcartid")
                        .HasColumnType("integer")
                        .HasColumnName("fkcartid");

                    b.Property<int>("Fkproductid")
                        .HasColumnType("integer")
                        .HasColumnName("fkproductid");

                    b.HasKey("Pkcartproductcid")
                        .HasName("Cart_Product_pkey");

                    b.HasIndex("Fkcartid");

                    b.HasIndex("Fkproductid");

                    b.ToTable("Cart_Product", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.Category", b =>
                {
                    b.Property<int>("Pkcategoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkcategoryid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkcategoryid"));

                    b.Property<string>("Categorygroup")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("categorygroup");

                    b.Property<string>("Categoryname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("categoryname");

                    b.HasKey("Pkcategoryid")
                        .HasName("Category_pkey");

                    b.ToTable("Category", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.Discount", b =>
                {
                    b.Property<int>("Pkdiscountid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkdiscountid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkdiscountid"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(19)
                        .HasColumnType("numeric(19)")
                        .HasColumnName("amount");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<DateOnly>("Expirydate")
                        .HasColumnType("date")
                        .HasColumnName("expirydate");

                    b.HasKey("Pkdiscountid")
                        .HasName("Discount_pkey");

                    b.ToTable("Discount", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.Member", b =>
                {
                    b.Property<int>("Pkemailid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkemailid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkemailid"));

                    b.Property<int?>("Fkuserid")
                        .HasColumnType("integer")
                        .HasColumnName("fkuserid");

                    b.Property<DateOnly?>("Lastloggedin")
                        .HasColumnType("date")
                        .HasColumnName("lastloggedin");

                    b.HasKey("Pkemailid")
                        .HasName("Member_pkey");

                    b.HasIndex("Fkuserid");

                    b.ToTable("Member", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.Order", b =>
                {
                    b.Property<int>("Pkorderid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkorderid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkorderid"));

                    b.Property<DateOnly>("Deliverydate")
                        .HasColumnType("date")
                        .HasColumnName("deliverydate");

                    b.Property<int?>("Fkuserid")
                        .HasColumnType("integer")
                        .HasColumnName("fkuserid");

                    b.Property<DateOnly>("Orderdate")
                        .HasColumnType("date")
                        .HasColumnName("orderdate");

                    b.Property<long>("Pptransactionid")
                        .HasColumnType("bigint")
                        .HasColumnName("pptransactionid");

                    b.Property<DateOnly>("Shippeddate")
                        .HasColumnType("date")
                        .HasColumnName("shippeddate");

                    b.HasKey("Pkorderid")
                        .HasName("Order_pkey");

                    b.HasIndex("Fkuserid");

                    b.ToTable("Order", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.OrderProduct", b =>
                {
                    b.Property<int>("Pkorderproductid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkorderproductid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkorderproductid"));

                    b.Property<int>("Fkorderid")
                        .HasColumnType("integer")
                        .HasColumnName("fkorderid");

                    b.Property<int>("Fkproductid")
                        .HasColumnType("integer")
                        .HasColumnName("fkproductid");

                    b.Property<int>("Qty")
                        .HasColumnType("integer")
                        .HasColumnName("qty");

                    b.Property<decimal>("Unitprice")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("unitprice");

                    b.HasKey("Pkorderproductid")
                        .HasName("Order_Product_pkey");

                    b.HasIndex("Fkorderid");

                    b.HasIndex("Fkproductid");

                    b.ToTable("Order_Product", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.OrderStatus", b =>
                {
                    b.Property<int>("Pkorderstatusid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkorderstatusid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkorderstatusid"));

                    b.Property<int?>("Fkoderid")
                        .HasColumnType("integer")
                        .HasColumnName("fkoderid");

                    b.Property<string>("Orderstate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("orderstate");

                    b.HasKey("Pkorderstatusid")
                        .HasName("OrderStatus_pkey");

                    b.HasIndex("Fkoderid");

                    b.ToTable("OrderStatus", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.Product", b =>
                {
                    b.Property<int>("Pkproductid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkproductid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkproductid"));

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("description");

                    b.Property<int>("Fkdiscountid")
                        .HasColumnType("integer")
                        .HasColumnName("fkdiscountid");

                    b.Property<bool>("Isfeatured")
                        .HasColumnType("boolean")
                        .HasColumnName("isfeatured");

                    b.Property<int>("Ismembershipproduct")
                        .HasColumnType("integer")
                        .HasColumnName("ismembershipproduct");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("name");

                    b.Property<int>("Qtyinstock")
                        .HasColumnType("integer")
                        .HasColumnName("qtyinstock");

                    b.Property<decimal>("Regularprice")
                        .HasPrecision(19, 2)
                        .HasColumnType("numeric(19,2)")
                        .HasColumnName("regularprice");

                    b.HasKey("Pkproductid")
                        .HasName("Product_pkey");

                    b.HasIndex("Fkdiscountid");

                    b.ToTable("Product", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.ProductCategory", b =>
                {
                    b.Property<int>("Pkproductcategoryid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkproductcategoryid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkproductcategoryid"));

                    b.Property<int>("Fkcategoryid")
                        .HasColumnType("integer")
                        .HasColumnName("fkcategoryid");

                    b.Property<int>("Fkproductid")
                        .HasColumnType("integer")
                        .HasColumnName("fkproductid");

                    b.HasKey("Pkproductcategoryid")
                        .HasName("Product_Category_pkey");

                    b.HasIndex("Fkcategoryid");

                    b.HasIndex("Fkproductid");

                    b.ToTable("Product_Category", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.ProductImage", b =>
                {
                    b.Property<int>("Pkimageid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkimageid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkimageid"));

                    b.Property<string>("Alttag")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("alttag");

                    b.Property<int>("Fkproductid")
                        .HasColumnType("integer")
                        .HasColumnName("fkproductid");

                    b.Property<bool>("Isprimary")
                        .HasColumnType("boolean")
                        .HasColumnName("isprimary");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("url");

                    b.HasKey("Pkimageid")
                        .HasName("ProductImage_pkey");

                    b.HasIndex("Fkproductid");

                    b.ToTable("ProductImage", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.Review", b =>
                {
                    b.Property<int>("Pkreviewid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkreviewid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkreviewid"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("comment");

                    b.Property<int>("Fkproductid")
                        .HasColumnType("integer")
                        .HasColumnName("fkproductid");

                    b.Property<int>("Rating")
                        .HasColumnType("integer")
                        .HasColumnName("rating");

                    b.HasKey("Pkreviewid")
                        .HasName("Review_pkey");

                    b.HasIndex("Fkproductid");

                    b.ToTable("Review", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.User", b =>
                {
                    b.Property<int>("Pkuserid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkuserid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkuserid"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("address");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("country");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("email");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("firstname");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("lastname");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("phone");

                    b.Property<string>("Postalcode")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("character varying(15)")
                        .HasColumnName("postalcode");

                    b.Property<string>("Province")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("province");

                    b.Property<string>("Usertype")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("usertype");

                    b.HasKey("Pkuserid")
                        .HasName("User_pkey");

                    b.HasIndex(new[] { "Email" }, "User_email_key")
                        .IsUnique();

                    b.ToTable("User", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.Wishlist", b =>
                {
                    b.Property<int>("Pkwishlistid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("pkwishlistid");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Pkwishlistid"));

                    b.Property<int>("Fkemailid")
                        .HasColumnType("integer")
                        .HasColumnName("fkemailid");

                    b.Property<int>("Fkproductid")
                        .HasColumnType("integer")
                        .HasColumnName("fkproductid");

                    b.HasKey("Pkwishlistid")
                        .HasName("Wishlist_pkey");

                    b.HasIndex("Fkemailid");

                    b.HasIndex("Fkproductid");

                    b.ToTable("Wishlist", (string)null);
                });

            modelBuilder.Entity("peakmotion.Models.Cart", b =>
                {
                    b.HasOne("peakmotion.Models.Member", "Fkemail")
                        .WithMany("Carts")
                        .HasForeignKey("Fkemailid")
                        .IsRequired()
                        .HasConstraintName("Cart_fkemailid_fkey");

                    b.Navigation("Fkemail");
                });

            modelBuilder.Entity("peakmotion.Models.CartProduct", b =>
                {
                    b.HasOne("peakmotion.Models.Cart", "Fkcart")
                        .WithMany("CartProducts")
                        .HasForeignKey("Fkcartid")
                        .IsRequired()
                        .HasConstraintName("Cart_Product_fkcartid_fkey");

                    b.HasOne("peakmotion.Models.Product", "Fkproduct")
                        .WithMany("CartProducts")
                        .HasForeignKey("Fkproductid")
                        .IsRequired()
                        .HasConstraintName("Cart_Product_fkproductid_fkey");

                    b.Navigation("Fkcart");

                    b.Navigation("Fkproduct");
                });

            modelBuilder.Entity("peakmotion.Models.Member", b =>
                {
                    b.HasOne("peakmotion.Models.User", "Fkuser")
                        .WithMany("Members")
                        .HasForeignKey("Fkuserid")
                        .HasConstraintName("Member_fkuserid_fkey");

                    b.Navigation("Fkuser");
                });

            modelBuilder.Entity("peakmotion.Models.Order", b =>
                {
                    b.HasOne("peakmotion.Models.User", "Fkuser")
                        .WithMany("Orders")
                        .HasForeignKey("Fkuserid")
                        .HasConstraintName("Order_fkuserid_fkey");

                    b.Navigation("Fkuser");
                });

            modelBuilder.Entity("peakmotion.Models.OrderProduct", b =>
                {
                    b.HasOne("peakmotion.Models.Order", "Fkorder")
                        .WithMany("OrderProducts")
                        .HasForeignKey("Fkorderid")
                        .IsRequired()
                        .HasConstraintName("Order_Product_fkorderid_fkey");

                    b.HasOne("peakmotion.Models.Product", "Fkproduct")
                        .WithMany("OrderProducts")
                        .HasForeignKey("Fkproductid")
                        .IsRequired()
                        .HasConstraintName("Order_Product_fkproductid_fkey");

                    b.Navigation("Fkorder");

                    b.Navigation("Fkproduct");
                });

            modelBuilder.Entity("peakmotion.Models.OrderStatus", b =>
                {
                    b.HasOne("peakmotion.Models.Order", "Fkoder")
                        .WithMany("OrderStatuses")
                        .HasForeignKey("Fkoderid")
                        .HasConstraintName("OrderStatus_fkoderid_fkey");

                    b.Navigation("Fkoder");
                });

            modelBuilder.Entity("peakmotion.Models.Product", b =>
                {
                    b.HasOne("peakmotion.Models.Discount", "Fkdiscount")
                        .WithMany("Products")
                        .HasForeignKey("Fkdiscountid")
                        .IsRequired()
                        .HasConstraintName("Product_fkdiscountid_fkey");

                    b.Navigation("Fkdiscount");
                });

            modelBuilder.Entity("peakmotion.Models.ProductCategory", b =>
                {
                    b.HasOne("peakmotion.Models.Category", "Fkcategory")
                        .WithMany("ProductCategories")
                        .HasForeignKey("Fkcategoryid")
                        .IsRequired()
                        .HasConstraintName("Product_Category_fkcategoryid_fkey");

                    b.HasOne("peakmotion.Models.Product", "Fkproduct")
                        .WithMany("ProductCategories")
                        .HasForeignKey("Fkproductid")
                        .IsRequired()
                        .HasConstraintName("Product_Category_fkproductid_fkey");

                    b.Navigation("Fkcategory");

                    b.Navigation("Fkproduct");
                });

            modelBuilder.Entity("peakmotion.Models.ProductImage", b =>
                {
                    b.HasOne("peakmotion.Models.Product", "Fkproduct")
                        .WithMany("ProductImages")
                        .HasForeignKey("Fkproductid")
                        .IsRequired()
                        .HasConstraintName("ProductImage_fkproductid_fkey");

                    b.Navigation("Fkproduct");
                });

            modelBuilder.Entity("peakmotion.Models.Review", b =>
                {
                    b.HasOne("peakmotion.Models.Product", "Fkproduct")
                        .WithMany("Reviews")
                        .HasForeignKey("Fkproductid")
                        .IsRequired()
                        .HasConstraintName("Review_fkproductid_fkey");

                    b.Navigation("Fkproduct");
                });

            modelBuilder.Entity("peakmotion.Models.Wishlist", b =>
                {
                    b.HasOne("peakmotion.Models.Member", "Fkemail")
                        .WithMany("Wishlists")
                        .HasForeignKey("Fkemailid")
                        .IsRequired()
                        .HasConstraintName("Wishlist_fkemailid_fkey");

                    b.HasOne("peakmotion.Models.Product", "Fkproduct")
                        .WithMany("Wishlists")
                        .HasForeignKey("Fkproductid")
                        .IsRequired()
                        .HasConstraintName("Wishlist_fkproductid_fkey");

                    b.Navigation("Fkemail");

                    b.Navigation("Fkproduct");
                });

            modelBuilder.Entity("peakmotion.Models.Cart", b =>
                {
                    b.Navigation("CartProducts");
                });

            modelBuilder.Entity("peakmotion.Models.Category", b =>
                {
                    b.Navigation("ProductCategories");
                });

            modelBuilder.Entity("peakmotion.Models.Discount", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("peakmotion.Models.Member", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("peakmotion.Models.Order", b =>
                {
                    b.Navigation("OrderProducts");

                    b.Navigation("OrderStatuses");
                });

            modelBuilder.Entity("peakmotion.Models.Product", b =>
                {
                    b.Navigation("CartProducts");

                    b.Navigation("OrderProducts");

                    b.Navigation("ProductCategories");

                    b.Navigation("ProductImages");

                    b.Navigation("Reviews");

                    b.Navigation("Wishlists");
                });

            modelBuilder.Entity("peakmotion.Models.User", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
